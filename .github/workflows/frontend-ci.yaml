name: Frontend CI Workflow
run-name: ${{ github.event_name == 'delete' && format('cleanup NPM dist tags') || format('') }}

on:
  workflow_call:
    outputs:
      npm_dist_tag:
        description: "NPM dist-tag of the published package."
        value: ${{ jobs.on-push.outputs.npm_dist_tag }}
      package_version:
        description: "NPM version of the published package."
        value: ${{ jobs.on-push.outputs.package_version }}

jobs:
  on-push:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      npm_dist_tag: ${{ steps.publish.outputs.npm_dist_tag }}
      package_version: ${{ steps.get_version.outputs.package_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://npm.pkg.github.com/'

      - name: Install dependencies
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # This step is to update internal dependencies specified via tag version to their latest available versions
      - name: Update dependencies
        run: npm ls --json |  jq -r '.dependencies | keys[]' | grep "@netcracker" | xargs --no-run-if-empty npm update
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check is Lerna project
        run: |
          if [ -f lerna.json ]; then
            echo "Project is a Lerna project."
            echo "IS_LERNA=true" >> $GITHUB_ENV
          else
            echo "Project is NOT a Lerna project."
            echo "IS_LERNA=false" >> $GITHUB_ENV
          fi

      - name: Bump version (prerelease only)
        if: startsWith(github.ref, 'refs/heads/develop') || startsWith(github.ref, 'refs/heads/release') || startsWith(github.ref, 'refs/heads/feature/')
        run: |
          CURRENT_BRANCH=$(echo $GITHUB_REF | sed 's/refs\/heads\///')
          if [[ "$CURRENT_BRANCH" == "develop" || "$ " == "release" || "$CURRENT_BRANCH" == feature/* ]]; then
            if [ "$IS_LERNA" == "true" ]; then
              lerna version prerelease --no-git-tag-version --no-private --no-push --yes
            else
              npm version prerelease --no-git-tag-version
            fi
          fi


      - name: Commit changes (if any)
        run: |
          # Check if there are any changes to commit
          if [ -n "$(git status --porcelain)" ]; then
            echo "Changes detected. Preparing to commit."
            git config --global user.name "github-actions"
            git config --global user.email "github-actions@github.com"
            git add .
            git commit -m "chore: bump prerelease version"
          else
            echo "No changes to commit."
          fi

      - name: Build the package
        run: npm run build --if-present

      - name: Run tests
        run: npm test --if-present

      - name: Get package version
        id: get_version
        run: |
          if [ "$IS_LERNA" == "true" ]; then
            VERSION=$(lerna list --json | jq -r '.[0].version')
          else
            VERSION=$(jq -r '.version' package.json)
          fi
          echo "package_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Publish to GitHub NPM Registry
        id: publish
        run: |
          CURRENT_BRANCH=$(echo $GITHUB_REF | sed 's/refs\/heads\///')
          if [ "$CURRENT_BRANCH" == "main" ]; then
            TAG_NAME="latest"
          elif [ "$CURRENT_BRANCH" == "release" ]; then
            TAG_NAME="next"
          elif [ "$CURRENT_BRANCH" == "develop" ]; then
            TAG_NAME="dev"
          elif [[ "$CURRENT_BRANCH" == feature/* ]]; then
            TAG_NAME="${CURRENT_BRANCH//\//-}"
          fi
          echo "npm_dist_tag=$TAG_NAME" >> $GITHUB_OUTPUT
          if [ -n "$TAG_NAME" ]; then
            if [ "$IS_LERNA" == "true" ]; then
              lerna publish from-package --yes --no-push --no-git-reset --no-git-tag-version --dist-tag "$TAG_NAME"
            else
              npm publish --tag "$TAG_NAME"
            fi
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push changes back
        run: |
          git push origin HEAD

  on-delete:
    if: github.event_name == 'delete'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://npm.pkg.github.com/'

      - name: Delete associated NPM dist tags
        run: |
          DELETED_BRANCH=${{ github.event.ref }}

          if [ "$DELETED_BRANCH" == "release" ]; then
            TAG_NAME="next"
          elif [[ "$DELETED_BRANCH" == feature/* ]]; then
            TAG_NAME="${DELETED_BRANCH//\//-}"
          else
            echo "No corresponding npm dist tag for this branch." && exit 0
          fi

          # Get package names to process
          if [ -f lerna.json ]; then
            echo "Detected Lerna project."
            PACKAGE_NAMES=$(lerna list --json | jq -r '.[].name')
          elif [ -f package.json ]; then
            echo "Detected single package npm project."
            PACKAGE_NAMES=$(jq -r '.name' package.json)
          else
            echo "No package.json or lerna.json found." && exit 1
          fi

          # Loop through all package names and remove tags
          for PACKAGE_NAME in $PACKAGE_NAMES; do
            echo "Processing package: $PACKAGE_NAME"
            if [ -n "$PACKAGE_NAME" ] && [ -n "$TAG_NAME" ]; then
              npm dist-tag rm "$PACKAGE_NAME" "$TAG_NAME"
            fi
          done
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}